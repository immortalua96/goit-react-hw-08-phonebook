{"version":3,"file":"static/js/603.1bcdfce0.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactEditor/ContactEditor.jsx","components/ContactItem/ContactItem.jsx","components/ContactFilter/ContactFilter.jsx","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n        const normalizedFilter = filter.toLowerCase();\nreturn contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n  }\n)","import React from 'react';\nimport {\n  Text,\n  TextInput,\n  Stack,\n  Button,\n  Group,\n  Box,\n  Paper,\n} from '@mantine/core';\nimport { notifications } from '@mantine/notifications';\nimport { IMaskInput } from 'react-imask';\nimport { useForm } from '@mantine/form';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst ContactEditor = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const form = useForm({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n\n    validate: {\n      // name: value => (/^\\S+@\\S+$/.test(value) ? null : 'Invalid email'),\n      // number: value => (/^\\S+@\\S+$/.test(value) ? null : 'Invalid email'),\n    },\n  });\n\n  const handleSubmit = ({ name, number }) => {\n    const isIncludeName = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    const isIncludeNumber = contacts.some(\n      contact =>\n        contact.number.replace('+', '').split('-').join('') ===\n        number.replace('+', '').split('-').join('')\n    );\n\n    if (isIncludeName) {\n      notifications.show({\n        id: 'hello-there',\n        withCloseButton: true,\n        autoClose: 5000,\n        title: 'We notify you that',\n        message: `Сontact with the name ${name.toUpperCase()} is already in your telephone book!`,\n        color: 'red',\n        loading: false,\n      });\n      return;\n    }\n\n    if (isIncludeNumber) {\n      notifications.show({\n        id: 'hello-there',\n        withCloseButton: true,\n        autoClose: 5000,\n        title: 'We notify you that',\n        message: `Сontact with the number ${number} is already in your telephone book!`,\n        color: 'red',\n        loading: false,\n      });\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    form.reset();\n  };\n\n  return (\n    <Paper shadow=\"sm\" radius=\"md\" p=\"md\">\n      <Stack justify=\"flex-start\" spacing=\"xl\">\n        <Text size=\"md\" weight={600} ta=\"center\">\n          Add contact:\n        </Text>\n        <Box w={300}>\n          <form onSubmit={form.onSubmit(handleSubmit)}>\n            <TextInput\n              required\n              withAsterisk\n              label=\"Contact name\"\n              placeholder=\"Enter contact name...\"\n              {...form.getInputProps('name')}\n              mb={'sm'}\n            />\n\n            <TextInput\n              component={IMaskInput}\n              mask=\"000-00-00\"\n              required\n              withAsterisk\n              label=\"Contact phone number\"\n              placeholder=\"000-00-00\"\n              {...form.getInputProps('number')}\n              mb={'sm'}\n            />\n\n            <Group position=\"center\" mt=\"md\">\n              <Button variant=\"outline\" onClick={() => form.reset()}>\n                Reset\n              </Button>\n              <Button type=\"submit\">Add Contact</Button>\n            </Group>\n          </form>\n        </Box>\n      </Stack>\n    </Paper>\n  );\n};\n\nexport default ContactEditor;","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ActionIcon, Group } from '@mantine/core';\nimport { IconTrash, IconEdit } from '@tabler/icons-react';\nimport { deleteContact } from 'redux/contacts/operations';\n\nconst ContactItem = ({ contactId, name, number }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(contactId));\n\n  return (\n    <>\n      <td>{name}</td>\n      <td>{number}</td>\n      <td>\n        <Group position=\"center\" spacing=\"xs\">\n          <ActionIcon color=\"red\" variant=\"outline\" onClick={handleDelete}>\n            <IconTrash size=\"1.125rem\" aria-label=\"Delete\" />\n          </ActionIcon>\n          <ActionIcon color=\"cyan\" variant=\"outline\" onClick={() => {}}>\n            <IconEdit size=\"1.125rem\" aria-label=\"Delete\" />\n          </ActionIcon>\n        </Group>\n      </td>\n    </>\n  );\n};\n\nexport default ContactItem;","import React from 'react';\nimport { TextInput } from '@mantine/core';\nimport { IconSearch } from '@tabler/icons-react';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/slice';\n\nconst ContactFilter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilterChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <TextInput\n      placeholder=\"Search by name\"\n      mb=\"md\"\n      icon={<IconSearch size=\"0.9rem\" stroke={1.5} />}\n      onChange={handleFilterChange}\n    />\n  );\n};\n\nexport default ContactFilter;\n","import React from 'react';\nimport { Text, Alert, Paper, Table, Stack } from '@mantine/core';\nimport { IconAlertCircle } from '@tabler/icons-react';\nimport { useSelector } from 'react-redux';\nimport {\n  selectIsLoading,\n  selectFilteredContacts,\n} from 'redux/contacts/selectors';\nimport ContactItem from 'components/ContactItem/ContactItem';\nimport ContactFilter from 'components/ContactFilter/ContactFilter';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectFilteredContacts);\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <Paper shadow=\"sm\" radius=\"sm\" p=\"md\" sx={{ width: '420px' }}>\n      <Stack justify=\"flex-start\" spacing=\"xl\">\n        <Text size=\"md\" weight={600} ta=\"center\">\n          Your contacts:\n        </Text>\n        <ContactFilter />\n        {contacts.length > 0 && (\n          <Table verticalSpacing=\"xs\">\n            <thead>\n              <tr>\n                <th width=\"200px\">Name</th>\n                <th>Number</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {contacts.map(({ id, name, number }) => (\n                <tr key={id}>\n                  <ContactItem contactId={id} name={name} number={number} />\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        )}\n\n        {!isLoading && contacts.length === 0 && (\n          <Alert\n            icon={<IconAlertCircle size=\"1rem\" />}\n            title=\"Attention!\"\n            color=\"red\"\n          >\n            Something terrible happened! You don't have any saved contacts in\n            your phone book!\n          </Alert>\n        )}\n      </Stack>\n    </Paper>\n  );\n};\n\nexport default ContactList;","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Box, Flex } from '@mantine/core';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport ContactEditor from 'components/ContactEditor/ContactEditor';\nimport ContactList from 'components/ContactList/ContactList';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <Flex\n        align=\"flex-start\"\n        direction={{ base: 'column', sm: 'row' }}\n        gap={{ base: 'sm', sm: 'lg' }}\n        justify={{ sm: 'center' }}\n      >\n        <Box>\n          <ContactEditor />\n        </Box>\n        <Box>\n          <ContactList />\n        </Box>\n      </Flex>\n    </>\n  );\n};\n\nexport default Contacts;"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilteredContacts","createSelector","filter","normalizedFilter","toLowerCase","contact","name","includes","dispatch","useDispatch","useSelector","form","useForm","initialValues","number","validate","Paper","shadow","radius","p","Stack","justify","spacing","Text","size","weight","ta","Box","w","onSubmit","isIncludeName","some","isIncludeNumber","replace","split","join","notifications","id","withCloseButton","autoClose","title","message","toUpperCase","color","loading","addContact","reset","TextInput","required","withAsterisk","label","placeholder","getInputProps","mb","component","IMaskInput","mask","Group","position","mt","Button","variant","onClick","type","contactId","ActionIcon","A","deleteContact","IconTrash","IconEdit","icon","IconSearch","stroke","onChange","e","setFilter","target","value","sx","width","length","Table","verticalSpacing","map","Alert","IconAlertCircle","useEffect","fetchContacts","Helmet","Flex","align","direction","base","sm","gap"],"sourceRoot":""}